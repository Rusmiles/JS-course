//ДОМАШКА
/*
1. Изучить теорию
2. Какой или какие из вариантов не верны:
*/

/* 
// Вариант №1
console.log('35' + -'22');
// Вернет 13

неверно, останется 35 - 22, т.к. если хотя бы один операнд является строкой, то второй будет также преобразован в строку (сложения чисел, в т.ч. и со знаком '-' - в данном примере не происходит);

// Вариант №2
console.log('35' * '22');
//Вернет 770

Верно - трушечка!

// Вариант №3
// console.log('558' > 22++);
//Вернет true

неверно, т.к. инкремент работает только с переменной;

// Вариант №4
let usersCounter = 0;
let newUsers = usersCounter++;
console.log(newUsers);
//Вернет 1

неверно потому, что постфиксная форма выполняет операцию уже после вывода первой переменной в консоль, в результате чего получается 0; для желаемого результата (1) необходима префиксная форма;

// Вариант №5
console.log((!false && 11) || (18 && !''));
//Вернет 18

неверно: в левой половине сравнения получается 11, в правой - 1, дальше идет сравнение, в результате которого побеждает первый результат, т.к. при результате true оператор ИЛИ || останавливается и возвращает исходное значение этого операнда.

// Вариант №6
let name = 0;
console.log(name ?? 'Без имени');
// Вернет 0
*/
// Верно - трушечка!

/* 
===========================
*/

// Домашки с LJS

//Преобразование типов

// Какой результат будет у выражений ниже?

/* 
"" + 1 + 0 // 10
"" - 1 + 0 // -1
true + false // 1
6 / "3" // 2
"2" * "3" // 6
4 + 5 + "px" // 9px
"$" + 4 + 5 // $45
"4" - 2 // 2
"4px" - 2 // NaN
7 / 0 // Infinity
"  -9  " + 5 // " -9 5 "
"  -9  " - 5 // -14
null + 1 // 1
undefined + 1 // NaN
" \t \n" - 2 // -2
*/

/* 
let a = '\t \n' - 2; // -2
alert(a);

// Если пробельные символы \t \n по краям, то это пустиая строка и становится нулем.
*/

/* 
// Исправьте сложение

// Было
let a = prompt("Первое число?", 1);
let b = prompt("Второе число?", 2);

alert(a + b); // 12
*/

/* 
// Стало
let a = prompt("Первое число?", 1);
let b = prompt("Второе число?", 2);

alert(+a + +b); // 3
*/

//Логические операторы
// Проверка значения из диапазона

/* Напишите условие if для проверки, что переменная age находится в диапазоне между 14 и 90 включительно.

«Включительно» означает, что значение переменной age может быть равно 14 или 90. */

/* 
// Решение
if (age >= 14 && age <= 90);
 */

// Проверка значения вне диапазона

/* Напишите условие if для проверки, что значение переменной age НЕ находится в диапазоне 14 и 90 включительно.

Напишите два варианта: первый с использованием оператора НЕ !, второй – без этого оператора. */

/* 
// Решение №1 с оператором '!'
if (!(age >= 14 && age <= 90));

// Решение №2 (другим сопсобом)
if (age > 14 || age > 90);
*/

/* 
let userName = prompt('Кто там?', '');

if (userName === 'Админ') {
  let pass = prompt('Буковки сюда', '');

  if (pass === 'Я здесь босс!') {
    alert('Ой, простите, в гриме не узнал!');
  } else if (pass === '' || pass === null) {
    alert('Что-то мала букав');
  } else {
    alert('Неправильный какой-то пароль');
  }
} else if (userName === '' || userName === null) {
  alert('Что-то мала букав');
} else {
  alert('Я вас не знаю, вы тут пока осмотритесь');
}
*/

// Оператор нулевого слияния

/* Результат выражения a ?? b будет следующим:

если a определено, то a,
если a не определено, то b.
Иначе говоря, оператор ?? возвращает первый аргумент, если он не null/undefined, иначе второй.

Оператор нулевого слияния не является чем-то принципиально новым. Это всего лишь удобный синтаксис, как из двух значений получить одно, которое «определено». */

/*
// if (строка с нулём)
if ('0') {
  alert('Привет');
} // строка не пустая - так что будет true
*/

/* 
// Название JavaScript
let nameJavaScript = prompt('Какое официальное название JаvaScript?', '');

if (nameJavaScript == 'ECMAScript') {
  alert('Верно!');
} else {
  alert('Не знаете? ECMAScript!');
}
*/

/* 
// Покажите знак числа
let value = prompt('Введите начение!', '');

if (value > 0) {
  alert( 1 );
} else if (value < 0) {
  alert( -1 );
} else {
  alert( 0 );
}
*/

// Перепишите if в '?'

/* // Было:
let result;

if (a + b < 4) {
  result = 'Мало';
} else {
  result = 'Много';
} */

/* // Стало: 
let result = (a + b < 4) ? 'Мало' : 'Много'; */

// Перепишите 'if..else' в '?'

/* // Было:
let message;

if (login == 'Сотрудник') {
  message = 'Привет';
} else if (login == 'Директор') {
  message = 'Здравствуйте!';
} else if (login == '') {
  message = 'Нет логина'; 
} else {
  message = '';
} */

/* // Стало:
message = (login == 'Сотрудник') ? 'Привет' :
  (login == 'Директор') ? 'Здравствуйте!' :
  (login == '') ? 'Нет логина' :
  ''; */

/* 
// Как избежать проблем
Зачем мы рассмотрели все эти примеры? Должны ли мы постоянно помнить обо всех этих особенностях? Не обязательно. Со временем все они станут вам знакомы, но можно избежать проблем, если следовать надёжным правилам:

Относитесь очень осторожно к любому сравнению с undefined/null, кроме случаев строгого равенства ===.
Не используйте сравнения >= > < <= с переменными, которые могут принимать значения null/undefined, разве что вы полностью уверены в том, что делаете. Если переменная может принимать эти значения, то добавьте для них отдельные проверки.
 */

/* // Операторы сравнения
5 > 4 // true
"ананас" > "яблоко" // false
"2" > "12" // true
undefined == null // true
undefined === null // false
null == "\n0\n" // false
null === +"\n0\n" // false */
